openapi: 3.0.3
info:
  version: 0.1.0
  title: Wappuchievements API
  description: Server API for Wach
paths:
  /achievements:
    summary: All achievements
    get:
      operationId: get /achievements
      description: Return a list of achievements
      responses:
        200:
          $ref: '#/components/responses/AchievementList'
  /achievements/{achievementId}:
    parameters:
      - $ref: '#/components/parameters/AchievementId'
    get:
      operationId: get /achievements/{achievementId}
      description: Return a single achievement
      responses:
        200:
          $ref: '#/components/responses/Achievement'
        404:
          $ref: '#/components/responses/NotFound'
  /achievements/{achievementId}/completions:
    description: Get all completions for given the achievement
    parameters:
      - $ref: '#/components/parameters/AchievementId'
    get:
      operationId: get /achievements/{achievementId}/completions
      responses:
        200:
          $ref: '#/components/responses/CompletedAchievementList'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      description: Complete the achievement as the logged in user, or add a completion if already completed
      operationId: post /achievements/{achievementId}/completions
      parameters:
        - $ref: '#/components/parameters/AchievementId'
        - $ref: '#/components/parameters/Action'
      responses:
        200:
          $ref: '#/components/responses/CompletedAchievement'
        201:
          $ref: '#/components/responses/CompletedAchievement'
        400:
          $ref: '#/components/responses/BadRequestCompleteAchievement'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      description: Complete the achievement as the logged in user if not completed previously
      operationId: put /achievements/{achievementId}/completions
      parameters:
        - $ref: '#/components/parameters/AchievementId'
      responses:
        200:
          $ref: '#/components/responses/CompletedAchievement'
        201:
          $ref: '#/components/responses/CompletedAchievement'
        400:
          $ref: '#/components/responses/BadRequestCompleteAchievement'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /users:
    parameters:
      - in: query
        name: sortBy
        description: User sorting criteria.
        schema:
          type: string
          enum:
            - score
          default: score
        required: false
      - in: query
        name: sortOrder
        description: User sorting order. Sorted by parameter sortBy.
          * `asc` - Ascending order
          * `desc` - Descending order
        schema:
          type: string
          enum:
            - asc
            - desc
    get:
      operationId: get /users
      description: Return all user profiles
      responses:
        200:
          $ref: '#/components/responses/UserList'
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      operationId: get /users/{userId}
      description: Get a single user
      responses:
        200:
          $ref: '#/components/responses/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /users/{userId}/completions:
    description: Get a list of all the achievements, completed by the given user
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      operationId: get /users/{userId}/completions
      responses:
        200:
          $ref: '#/components/responses/CompletedAchievementList'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/{userId}/completions/{achievementId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/AchievementId'
    get:
      operationId: get /users/{userId}/completions/{completedAchievementId}
      responses:
        200:
          $ref: '#/components/responses/CompletedAchievement'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: delete /users/{userId}/completions/{completedAchievementId}
      description: Cancel achievement completion
      responses:
        204:
          description: Achievement completion cancelled
        400:
          $ref: '#/components/responses/BadRequestCompleteAchievement'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /completed-achievements:
    description: Get all completed achievements
    get:
      operationId: get /completed-achievements
      responses:
        200:
          $ref: '#/components/responses/CompletedAchievementList'

components:
  parameters:
    AchievementId:
      description: The id of the achievement to get
      in: path
      name: achievementId
      schema:
        type: integer
      required: true
    UserId:
      description: Either a numerical id, or special value "me", which refers to the logged in user
      in: path
      name: userId
      required: true
      schema:
        oneOf:
          - type: integer
          - type: string
            enum:
              - me
    Action:
      description: Whether to complete or cancel achievement
      in: query
      name: action
      required: false
      schema:
        type: string
        enum:
          - complete
          - cancel
        default: complete
  schemas:
    Achievement:
      type: object
      required:
        - type
        - id
        - _links
        - title
        - points
        - requires
        - required-by
        - max-completions
      properties:
        type:
          description: Always "achievement"
          type: string
          enum:
            - achievement
        _links:
          type: object
          required:
            - self
            - completions
          properties:
            self:
              type: string
              format: uri
              description: A link to self
            completions:
              type: string
              format: uri
              description: A link to a list of completions for the achievement
        title:
          type: string
          description: Title of the achievement
        points:
          type: integer
          description: How many points are awarded for completing the achievement
        required-by:
          type: array
          description: A list of achievements that require this achievement to be completed first
          items:
            type: object
            required:
              - id
              - href
            properties:
              id:
                type: string
                description: Id of the achievement
              href:
                type: string
                description: A link to the achievement
        requires:
          type: array
          description: A list of achievements that require this achievement to be completed first
          items:
            type: object
            required:
              - id
              - href
            properties:
              id:
                type: string
                description: Id of the achievement
              href:
                type: string
                description: A link to the achievement
        max-completions:
          type: integer
          description: How many times this achievement can be completed by a single user
      example:
        {
          "id": 13,
          "type": "achievement",
          "_links": {
            "self": "/achievements/13",
            "completions": "/achievements/13/completions"
          },
          "title": "Example achievement",
          "points": 100,
          "required-by": [ {
             "id": 15,
             "href": "/achievement/10"
          } ],
          "requires": [ {
            "id": 10,
            "href": "/achievement/15"
          } ],
          "max-completions": 1
        }
    AchievementArray:
      type: array
      items:
        $ref: '#/components/schemas/Achievement'
    User:
      type: object
      required:
        - id
        - type
        - _links
        - name
        - imageUrl
      properties:
        id:
          type: string
        type:
          type: string
          description: Always "user"
          enum:
            - user
        _links:
          type: object
          properties:
            self:
              type: string
              format: uri
              description: A link to self
            completed-achievements:
              type: string
              format: uri
              description: A list of achievements that this user has completed
        name:
          type: string
        imageUrl:
          type: string
      example:
        {
          "id": 7,
          "type": "user",
          "_links": {
            "self": "/users/7",
            "completed-achievements": "/users/7/completed-achievements"
          },
          "name": "Erkki Esimerkki",
          "imageUrl": "/static/users/7.png"
        }
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'
    CompletedAchievement:
      type: object
      required:
        - type
        - _links
        - user-id
        - achievement-id
        - completion-date
        - completed-times
      properties:
        type:
          description: Always "completed-achievement"
          type: string
          enum:
            - completed-achievement
        _links:
          type: object
          required:
            - self
            - achievement
            - user
          properties:
            self:
              description: A link to self
              type: string
            achievement:
              description: A link to to the achievement that was completed
              type: string
            user:
              description: A link to the user that completed the achievement
        user-id:
          description: Id of the user who completed the achievement
          type: number
        achievement-id:
          description: Id of the completed achievement
          type: number
        completion-date:
          description: Date when the achievement was completed for the first time by the user
          type: string
          format: date-time
        completed-times:
          description: How many times the user has completed the achievement
          type: integer
      example:
        {
          "_links": [
              "self": "/users/7/completed-achievements/3",
              "achievement": "/achievements/3",
              "user": "/users/7"
          ],
          "user-id": 7,
          "achievement-id": 3,
          "completion-date": "2017-07-21T17:32:28Z",
          "completed-times": 1

        }
    CompletedAchievementArray:
      type: array
      items:
        $ref: '#/components/schemas/CompletedAchievement'
    Error:
      type: object
      required:
        - type
        - reason
      properties:
        type:
          description: Always "error"
          type: string
          enum:
            - error
        reason:
          description: User readable error message
          type: string
      example: {
        "reason": "There was an error handling the request"
      }
  responses:
    Achievement:
      description: A single achievemnt
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Achievement'
    AchievementList:
      description: A list of achievements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementArray'
    User:
      description: A user profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserList:
      description: A list of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserArray'
    CompletedAchievement:
      description: A completed achievement object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompletedAchievement'
    CompletedAchievementList:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompletedAchievementArray'
    BadRequestCompleteAchievement:
      description: Error related to achievement requirements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Login is required to do the action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
